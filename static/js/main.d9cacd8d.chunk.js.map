{"version":3,"sources":["../node_modules/@linways/table-to-excel/dist sync","stores/store.js","forms/MainForm.js","tables/CulvertTable.js","forms/CulvertForm.js","tables/Table.js","layout/App.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Store","startDiameter","endDiameter","maxLoss","minLoss","culverts","formFulfilled","maxCulverts","minCulverts","setMaxCulverts","setMinCulverts","handleSumbit","values","setCulverts","showForm","decorate","observable","action","createContext","InputSchema","Yup","shape","required","moreThan","positive","lessThan","max","observer","store","useContext","enableReinitialize","initialValues","validationSchema","onSubmit","errors","touched","className","htmlFor","name","type","placeholder","data-toggle","aria-haspopup","aria-expanded","tableBody","scope","lastDiameter","totalLambda","Math","pow","singleLambda","loss","i","newDiameter","sqrt","totalLoss","push","key","toFixed","createTable","value","min","message","tableID","number","endLoss","length","onClick","table","document","getElementById","cloneNode","tr","createElement","th","innerText","appendChild","insertBefore","firstChild","secondTable","append","thirdTable","TableToExcel","convert","tableToExcel","ReactDOM","render"],"mappings":"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","file":"static/js/main.d9cacd8d.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 253;","import { decorate, observable, action } from \"mobx\";\r\nimport { createContext } from \"react\";\r\n\r\nclass Store {\r\n  startDiameter = null;\r\n  endDiameter = null;\r\n  maxLoss = null;\r\n  minLoss = null;\r\n  culverts = null;\r\n  formFulfilled = false;\r\n  maxCulverts = null;\r\n  minCulverts = null;\r\n\r\n  setMaxCulverts = (culverts) => {\r\n    this.maxCulverts=culverts;\r\n  }\r\n\r\n  setMinCulverts = (culverts) => {\r\n    this.minCulverts=culverts;\r\n  }\r\n  \r\n  handleSumbit = (values) => {\r\n    this.startDiameter = values.startDiameter;\r\n    this.endDiameter = values.endDiameter;\r\n    this.maxLoss = values.maxLoss;\r\n    this.minLoss = values.minLoss;\r\n    this.formFulfilled = true;\r\n  };\r\n  setCulverts = (culverts) => {\r\n    this.culverts = culverts;\r\n  };\r\n  showForm = () => {\r\n    this.formFulfilled = false;\r\n  }\r\n}\r\n\r\ndecorate(Store, {\r\n  startDiameter: observable,\r\n  endDiameter: observable,\r\n  maxLoss: observable,\r\n  minLoss: observable,\r\n  culverts: observable,\r\n  maxCulverts: observable,\r\n  minCulverts: observable,\r\n  formFulfilled : observable,\r\n  handleSumbit: action,\r\n  setCulverts: action,\r\n  showForm : action,\r\n  setMaxCulverts : action,\r\n  setMinCulverts: action\r\n});\r\n\r\nexport default createContext(new Store());\r\n","import React, { useContext } from \"react\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport \"../styles/Form.css\";\r\nimport \"../styles/App.css\";\r\nimport Store from \"../stores/store\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nconst InputSchema = Yup.object().shape({\r\n  startDiameter: Yup.number()\r\n    .required(\"Wpisz średnicę początkową\")\r\n    .moreThan(\r\n      Yup.ref(\"endDiameter\"),\r\n      \"Wartość nie może być mniejsza niż średnica końcowa\"\r\n    )\r\n    .positive(\"Wymagane jest wartość dodatnia\"),\r\n  endDiameter: Yup.number()\r\n    .required(\"Wpisz średnicę końcową\")\r\n    .lessThan(\r\n      Yup.ref(\"startDiameter\"),\r\n      \"Wartość nie może być większa niż średnica początkowa\"\r\n    )\r\n    .positive(\"Wymagane jest wartość dodatnia\"),\r\n  maxLoss: Yup.number()\r\n    .required(\"Wpisz maksymalny ubytek przekroju\")\r\n    .max(100, \"Wartośc nie może przekraczać 100%\")\r\n    .moreThan(\r\n      Yup.ref(\"minLoss\"),\r\n      \"Wartość nie może być mniejsza niż minimalny ubytek\"\r\n    )\r\n    .positive(\"Wymagane jest wartość dodatnia\"),\r\n  minLoss: Yup.number()\r\n    .required(\"Wpisz minimalny ubytek przekroju\")\r\n    .lessThan(\r\n      Yup.ref(\"maxLoss\"),\r\n      \"Wartość nie może być większa niż maksymalny ubytek\"\r\n    )\r\n    .max(100, \"Wartośc nie może przekraczać 100%\")\r\n    .positive(\"Wymagane jest wartość dodatnia\")\r\n});\r\n\r\nconst MainForm = () => {\r\n  const store = useContext(Store);\r\n  return (\r\n    <Formik\r\n      enableReinitialize={true}\r\n      initialValues={{\r\n        startDiameter: store.startDiameter ? store.startDiameter : 20,\r\n        endDiameter: store.endDiameter ? store.endDiameter : 8,\r\n        maxLoss: store.maxLoss ? store.maxLoss : 40,\r\n        minLoss: store.minLoss ? store.minLoss : 10\r\n      }}\r\n      validationSchema={InputSchema}\r\n      onSubmit={values => {\r\n        store.handleSumbit(values);\r\n      }}\r\n    >\r\n      {({ errors, touched }) => (\r\n        <Form className=\"main-form text-center\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header\">\r\n              <h3 className=\"mb-3\">Wprowadź dane</h3>\r\n            </div>\r\n\r\n            <div className=\"card-body\">\r\n              <label htmlFor=\"startDiameter\">Początkowa średnica [mm]</label>\r\n              <Field\r\n                name=\"startDiameter\"\r\n                type=\"number\"\r\n                className=\"form-control text-center\"\r\n                placeholder=\"Wpisz początkową średnicą pręta\"\r\n              />\r\n              {errors.startDiameter && touched.startDiameter ? (\r\n                <div className=\"text-danger\">{errors.startDiameter}</div>\r\n              ) : null}\r\n              <label htmlFor=\"endDiameter\">Końcowa średnica [mm]</label>\r\n              <Field\r\n                name=\"endDiameter\"\r\n                type=\"number\"\r\n                className=\"form-control text-center\"\r\n                placeholder=\"Wpisz końcową średnicą pręta\"\r\n              />\r\n              {errors.endDiameter && touched.endDiameter ? (\r\n                <div className=\"text-danger\">{errors.endDiameter}</div>\r\n              ) : null}\r\n\r\n              <label htmlFor=\"maxLoss\">Maksymalny ubytek [%]</label>\r\n              <Field\r\n                name=\"maxLoss\"\r\n                type=\"number\"\r\n                className=\"form-control text-center\"\r\n                placeholder=\"Wpisz max ubytek przekroju\"\r\n              />\r\n              {errors.maxLoss && touched.maxLoss ? (\r\n                <div className=\"text-danger\">{errors.maxLoss}</div>\r\n              ) : null}\r\n\r\n              <label htmlFor=\"minLoss\">Minimalny ubytek [%]</label>\r\n              <Field\r\n                name=\"minLoss\"\r\n                type=\"number\"\r\n                className=\"form-control text-center\"\r\n                placeholder=\"Wpisz min ubytek przekroju\"\r\n              />\r\n              {errors.minLoss && touched.minLoss ? (\r\n                <div className=\"text-danger\">{errors.minLoss}</div>\r\n              ) : null}\r\n            </div>\r\n\r\n            <div className=\"card-footer text-center dropright\">\r\n              <button\r\n                className=\"btn btn-lg btn-outline-dark btn-block dropdown-toggle\"\r\n                data-toggle=\"dropdown\"\r\n                aria-haspopup=\"true\"\r\n                aria-expanded=\"false\"\r\n                type=\"submit\"\r\n              >\r\n                Oblicz\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default observer(MainForm);\r\n","import React, { useContext } from \"react\";\r\nimport \"../styles/Table.css\";\r\nimport Store from \"../stores/store\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nconst CulvertTable = () => {\r\n  const store = useContext(Store);\r\n  const { startDiameter, endDiameter, culverts } = store;\r\n  const tableBody = [];\r\n\r\n  const createTable = () => {\r\n    let lastDiameter = startDiameter;\r\n    //stałe\r\n    let totalLambda = Math.pow(startDiameter / endDiameter, 2);\r\n    let singleLambda = Math.pow(totalLambda, 1 / culverts);\r\n    let loss = (1 - 1 / singleLambda) * 100;\r\n\r\n    for (let i = 1; i <= culverts; i++) {\r\n      //obliczam średnicę\r\n      let newDiameter = Math.sqrt(1 - loss / 100) * lastDiameter;\r\n      let totalLoss = (1 - Math.pow(newDiameter / startDiameter, 2)) * 100;\r\n\r\n      tableBody.push(\r\n        <tr key={i}>\r\n          <td>{i}</td>\r\n          <td>{newDiameter.toFixed(2)}</td>\r\n          <td>{totalLoss.toFixed(2)}</td>\r\n        </tr>\r\n      );\r\n      lastDiameter = newDiameter;\r\n    }\r\n\r\n    let key = culverts;\r\n    tableBody.push(\r\n      <tr key={key}>\r\n        <td>\r\n          Ubytek = <b> {loss.toFixed(2)} %</b>\r\n        </td>\r\n        <td>\r\n          Lambda pojedyncza = <b> {singleLambda.toFixed(2)}</b>\r\n        </td>\r\n        <td>\r\n          Lambda całkowita = <b> {totalLambda.toFixed(2)}</b>\r\n        </td>\r\n      </tr>\r\n    );\r\n    return tableBody;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"results\"></div>\r\n      <h2 className=\"my-4 text-center\">\r\n        Tabela dla liczby ciągów równych: {store.culverts}\r\n      </h2>\r\n      <table className=\"table table-bordered text-justify-center text-center my-table table-striped\" id=\"thirdTable\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">Nr ciągu</th>\r\n            <th scope=\"col\">Średnica [mm]</th>\r\n            <th scope=\"col\">Ubytek całkowity [%]</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{createTable()}</tbody>\r\n      </table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default observer(CulvertTable);\r\n","import React, { useContext } from \"react\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport \"../styles/Form.css\";\r\nimport Store from \"../stores/store\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nconst CulvertForm = () => {\r\n  const store = useContext(Store);\r\n  const { culverts, maxCulverts,minCulverts,setCulverts } = store;\r\n  return (\r\n    <Formik\r\n      enableReinitialize={true}\r\n      initialValues={{ value: culverts ? culverts : 0 }}\r\n      validationSchema={Yup.object().shape({\r\n        value: Yup.number()\r\n          .required(\"Wpisz liczbę przepustów\")\r\n          .max(maxCulverts, \"Wartośc maksymalna to \" + maxCulverts)\r\n          .min(minCulverts, \"Wartośc minimalna to \" + minCulverts)\r\n      })}\r\n      onSubmit={({value}) => {\r\n        setCulverts(value);\r\n      }}\r\n    >\r\n      {({ errors, touched }) => (\r\n        <Form className=\"sub-form text-center\">\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <label htmlFor=\"value\">Liczba przepustów</label>\r\n              <Field\r\n                name=\"value\"\r\n                type=\"number\"\r\n                className=\"form-control text-center\"\r\n                placeholder=\"Wpisz liczbę przepustów\"\r\n              />\r\n              {errors.value && touched.value ? (\r\n                <div className=\"text-danger\">{errors.value}</div>\r\n              ) : null}\r\n            </div>\r\n\r\n            <div className=\"card-footer text-center\">\r\n              <button\r\n                className=\"btn btn-lg btn-outline-dark btn-block\"\r\n                type=\"submit\"\r\n              >\r\n                Pokaż\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default observer(CulvertForm);\r\n","import React, { useContext } from \"react\";\r\nimport \"../styles/Table.css\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport Store from \"../stores/store\";\r\n\r\nconst Table = ({ message, loss, setCulverts,tableID }) => {\r\n  const store = useContext(Store);\r\n  const { startDiameter, endDiameter } = store;\r\n  const tableBody = [];\r\n\r\n  const createTable = () => {\r\n    let lastDiameter = startDiameter;\r\n    let number = 1;\r\n    let endLoss = 0;\r\n\r\n    while (lastDiameter > endDiameter) {\r\n      let newDiameter = Math.sqrt(1 - loss / 100) * lastDiameter;\r\n      if (newDiameter <= endDiameter) {\r\n        newDiameter = endDiameter;\r\n        endLoss = ((1 - Math.pow(endDiameter / lastDiameter, 2)) * 100).toFixed(2);\r\n      }\r\n      let totalLoss = (1 - Math.pow(newDiameter / startDiameter, 2)) * 100;\r\n      let singleLambda = Math.pow(lastDiameter / newDiameter, 2);\r\n      let totalLambda = Math.pow(startDiameter / newDiameter, 2);\r\n      tableBody.push(\r\n        <tr key={number}>\r\n          <td>{number}</td>\r\n          <td>{newDiameter.toFixed(2)}</td>\r\n          <td>{totalLoss.toFixed(2)}</td>\r\n          <td>{singleLambda.toFixed(2)}</td>\r\n          <td>{totalLambda.toFixed(2)}</td>\r\n        </tr>\r\n      );\r\n      number++;\r\n      lastDiameter = newDiameter;\r\n    }\r\n\r\n    tableBody.push(\r\n      <tr key={++number}>\r\n        <td>\r\n          Ubytek końcowy = <b>{endLoss} %</b>\r\n        </td>\r\n      </tr>\r\n    );\r\n\r\n    setCulverts(--tableBody.length);\r\n    return tableBody;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"mt-3\"></div>\r\n      <h2 className=\"my-4 text-center\">{message}</h2>\r\n      <table className=\"table table-bordered text-justify-center text-center my-table table-striped\" id={tableID}>\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">Nr ciągu</th>\r\n            <th scope=\"col\">Średnica [mm]</th>\r\n            <th scope=\"col\">Ubytek całkowity [%]</th>\r\n            <th scope=\"col\">Lambda pojedyncza</th>\r\n            <th scope=\"col\">Lambda całkowita</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{createTable()}</tbody>\r\n      </table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default observer(Table);\r\n","import React, { useContext } from \"react\";\nimport \"../styles/App.css\";\nimport Form from \"../forms/MainForm\";\nimport CulvertTable from \"../tables/CulvertTable\";\nimport CulvertsForm from \"../forms/CulvertForm\";\nimport Table from \"../tables/Table\";\nimport { observer } from \"mobx-react-lite\";\nimport Store from \"../stores/store\";\nimport TableToExcel from \"@linways/table-to-excel\";\nimport { FaFileExcel } from 'react-icons/fa';\nconst App = () => {\n  const store = useContext(Store);\n\n  const tableToExcel = () => {\n\n    const table = document.getElementById(\"firstTable\").cloneNode(true);\n\n    let tr = document.createElement(\"TR\");\n    const th = document.createElement(\"TH\");\n    th.innerText=\"Tabela dla maksymalnego pojedyńczego względnego ubytku przekroju\";\n    tr.appendChild(th)\n    table.insertBefore(tr, table.firstChild);\n\n    tr = tr.cloneNode(true);\n    tr.firstChild.innerText = \"Tabela dla minimalnego pojedyńczego względnego ubytku przekroju\";\n\n    const secondTable = document.getElementById(\"secondTable\").cloneNode(true);\n    secondTable.insertBefore(tr, secondTable.firstChild);\n    table.append(secondTable);\n\n    if(store.culverts)\n    {\n      const thirdTable = document.getElementById(\"thirdTable\").cloneNode(true);\n      tr = tr.cloneNode(true);\n      tr.firstChild.innerText = \"Tabela dla zadanej liczby ciągów\";\n      thirdTable.insertBefore(tr, thirdTable.firstChild);\n      table.append(thirdTable);\n    }\n    TableToExcel.convert(table);\n  }\n\n  return !store.formFulfilled ? (\n    <Form />\n  ) : (\n    <>\n      <Table\n        message={`Tabela dla maksymalnego pojedyńczego względnego ubytku przekroju równego: ${store.maxLoss} %`}\n        loss={store.maxLoss}\n        setCulverts={store.setMinCulverts}\n        tableID=\"firstTable\"\n      />\n      <Table\n        message={`Tabela dla minimalnego pojedyńczego względnego ubytku przekroju równego: ${store.minLoss} %`}\n        loss={store.minLoss}\n        setCulverts={store.setMaxCulverts}\n        tableID=\"secondTable\"\n      />\n\n      <CulvertsForm />\n      {store.culverts ? <CulvertTable /> : null}\n\n      <div className=\"dropleft my-btn\">\n        <button\n          className=\"btn btn-lg btn-outline-dark btn-block dropdown-toggle\"\n          data-toggle=\"dropdown\"\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\"\n          type=\"submit\"\n          onClick={store.showForm}\n        >\n          Cofnij\n        </button>\n\n        <button\n          className=\"btn btn-lg btn-outline-dark btn-block\"\n          onClick={() => tableToExcel()}\n        >\n          Eksportuj do formatu .xls <FaFileExcel />\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default observer(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from '../src/layout/App';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}